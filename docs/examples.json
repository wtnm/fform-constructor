[
    {
        "schema": {
            "links": [],
            "code": {
                "type": "object",
                "ff_layout": {
                    "$_fields": [
                        "login",
                        "password",
                        {
                            "$_ref": "^/parts/Submit",
                            "style": {
                                "width": "100%"
                            },
                            "children": [
                                "Send"
                            ]
                        },
                        {
                            "$_ref": "^/parts/Reset",
                            "style": {
                                "width": "100%"
                            }
                        }
                    ]
                },
                "properties": {
                    "login": {
                        "type": "string",
                        "title": "login",
                        "ff_placeholder": "Enter login..."
                    },
                    "password": {
                        "type": "string",
                        "title": "password",
                        "ff_placeholder": "Enter password...",
                        "ff_custom": {
                            "Main": {
                                "type": "password"
                            }
                        }
                    }
                }
            },
            "error": ""
        },
        "elements": {
            "links": [
                {
                    "import": [],
                    "from": "styles.json"
                }
            ],
            "code": ""
        },
        "css": {
            "links": [
                "tacit.min.css",
                "style.css"
            ],
            "cxBind": "",
            "code": ""
        },
        "props": {
            "jsonValidation": false,
            "rest": {
                "value": ""
            }
        },
        "formProps": {
            "jsonValidation": false,
            "props": []
        },
        "data": {
            "schema": {
                "links": [
                    {
                        "path": "#/definitions/imported",
                        "link": "imported.json"
                    }
                ],
                "code": {
                    "type": "object",
                    "ff_layout": {
                        "$_fields": [
                            "stringProp",
                            "impObj"
                        ]
                    },
                    "properties": {
                        "stringProp": {
                            "type": "string",
                            "title": "string"
                        },
                        "impObj": {
                            "$ref": "#/definitions/imported"
                        }
                    }
                }
            },
            "elements": {
                "links": [
                    {
                        "import": [],
                        "from": "styles.json"
                    },
                    {
                        "import": [
                            "obj"
                        ],
                        "from": "objs.js"
                    }
                ],
                "code": "fn:{one:()=>alert('one')}"
            },
            "css": {
                "links": [
                    "tacit.min.css",
                    "style.css"
                ],
                "code": ".main{\n\n}"
            }
        },
        "name": "simple form"
    },
    {
        "schema": {
            "links": [],
            "code": {
                "type": "object",
                "ff_data": {
                    "focusValue": "/array/2/1"
                },
                "textarea": {
                    "title": "Textarea",
                    "type": "string",
                    "ff_presets": "textarea"
                },
                "ff_layout": {
                    "$_fields": [
                        {
                            "className": {
                                "inline": true
                            },
                            "$_fields": [
                                {
                                    "$_ref": "^/parts/Button",
                                    "children": "switch to viewer",
                                    "className": {
                                        "shrink": true
                                    },
                                    "$_maps": {
                                        "disabled": "@/params/viewer",
                                        "className/button-viewer": false
                                    },
                                    "onClick": {
                                        "$": "^/fn/api",
                                        "args": [
                                            "set",
                                            "/@/params/viewer",
                                            true,
                                            {
                                                "macros": "switch"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "$_ref": "^/parts/Button",
                                    "children": "switch to editor",
                                    "className": {
                                        "shrink": true
                                    },
                                    "$_maps": {
                                        "disabled": {
                                            "$": "^/fn/not",
                                            "args": "@/params/viewer"
                                        },
                                        "className/button-viewer": false
                                    },
                                    "onClick": {
                                        "$": "^/fn/setValue",
                                        "args": [
                                            false,
                                            {
                                                "path": "/@/params/viewer",
                                                "macros": "switch"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "$_ref": "^/parts/expander"
                                }
                            ]
                        },
                        {
                            "className": {
                                "inline": true
                            },
                            "$_fields": [
                                "string",
                                "number"
                            ]
                        },
                        "radio",
                        "checkboxes",
                        "multiselect",
                        "textarea"
                    ]
                },
                "properties": {
                    "string": {
                        "type": "string",
                        "title": "string",
                        "ff_presets": "string:inlineTitle"
                    },
                    "number": {
                        "type": "number",
                        "title": "number",
                        "ff_presets": "number:inlineTitle"
                    },
                    "radio": {
                        "type": "string",
                        "title": "radio",
                        "ff_presets": "radio:inlineItems:inlineTitle",
                        "enum": [
                            "option 1",
                            "option 2",
                            "option 3"
                        ]
                    },
                    "checkboxes": {
                        "type": "array",
                        "title": "checkboxes",
                        "ff_presets": "checkboxes:inlineItems:inlineTitle",
                        "ff_managed": true,
                        "ff_data": {
                            "fData": {
                                "enum": [
                                    "1",
                                    "2",
                                    "3"
                                ],
                                "type": "array",
                                "title": "checkboxes",
                                "enumExten": {
                                    "1": {
                                        "label": "val 1"
                                    },
                                    "2": {
                                        "label": "val 2"
                                    },
                                    "3": {
                                        "label": "val 3"
                                    }
                                },
                                "canAdd": true
                            }
                        },
                        "ff_enumExten": {
                            "1": {
                                "label": "val 1"
                            },
                            "2": {
                                "label": "val 2"
                            },
                            "3": {
                                "label": "val 3"
                            }
                        }
                    },
                    "multiselect": {
                        "type": "array",
                        "title": "Multiselect",
                        "ff_presets": "multiselect:inlineTitle",
                        "ff_managed": true,
                        "ff_data": {
                            "fData": {
                                "enum": [
                                    "option 1",
                                    "option 2",
                                    "option 3"
                                ],
                                "type": "array",
                                "title": "Multiselect",
                                "canAdd": true
                            }
                        },
                        "ff_layout": {
                            "$_fields": [
                                "0"
                            ]
                        },
                        "items": {
                            "type": "string",
                            "enum": [
                                "option 1",
                                "option 2",
                                "option 3"
                            ]
                        }
                    },
                    "textarea": {
                        "type": "string",
                        "title": "Textarea",
                        "ff_presets": "textarea"
                    }
                }
            }
        },
        "elements": {
            "links": [
                {
                    "import": [],
                    "from": "styles.json"
                }
            ],
            "code": ""
        },
        "css": {
            "links": [
                "tacit.min.css",
                "style.css"
            ],
            "cxBind": "",
            "code": ""
        },
        "props": {
            "jsonValidation": false,
            "rest": {
                "value": ""
            }
        },
        "name": "layouts and viewer"
    },
    {
        "schema": {
            "links": [],
            "code": {
                "type": "array",
                "title": "Array of mix",
                "default": [
                    "vd 1",
                    "vd 2",
                    [
                        "string value",
                        0,
                        false,
                        null,
                        "more text"
                    ]
                ],
                "ff_layout": {
                    "$_fields": [
                        {
                            "className": {
                                "layout": true,
                                "inline": true
                            },
                            "$_fields": [
                                "0",
                                "1"
                            ]
                        },
                        "2"
                    ]
                },
                "items": [
                    {
                        "type": "string",
                        "ff_presets": "string:noArrayControls"
                    },
                    {
                        "type": "string",
                        "default": "some default",
                        "ff_presets": "string:noArrayControls"
                    },
                    {
                        "type": "array",
                        "maxItems": 4,
                        "title": "Array of values",
                        "ff_presets": "array:noArrayControls",
                        "ff_custom": {
                            "Title": {
                                "style": {
                                    "width": "100%"
                                },
                                "children": [
                                    {},
                                    {
                                        "$_ref": "^/parts/ArrayAddButton",
                                        "children": [
                                            "+string"
                                        ],
                                        "onClick": {
                                            "args": [
                                                "./",
                                                1,
                                                {
                                                    "setOneOf": 0
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "$_ref": "^/parts/ArrayAddButton",
                                        "children": [
                                            "+number"
                                        ],
                                        "onClick": {
                                            "args": [
                                                "./",
                                                1,
                                                {
                                                    "setOneOf": 1
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "$_ref": "^/parts/ArrayAddButton",
                                        "children": [
                                            "+boolean"
                                        ],
                                        "onClick": {
                                            "args": [
                                                "./",
                                                1,
                                                {
                                                    "setOneOf": 2
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "$_ref": "^/parts/ArrayDelButton"
                                    },
                                    {
                                        "$_ref": "^/parts/ArrayEmpty"
                                    },
                                    {
                                        "$_ref": "^/parts/ArrayItemMenu",
                                        "_$useTag": "span",
                                        "buttons": [
                                            "up",
                                            "down",
                                            "del"
                                        ],
                                        "buttonsProps": {
                                            "up": {
                                                "children": [
                                                    "?"
                                                ]
                                            },
                                            "down": {
                                                "children": [
                                                    "?"
                                                ]
                                            },
                                            "del": {
                                                "children": [
                                                    "x"
                                                ]
                                            }
                                        },
                                        "style": {
                                            "float": "right",
                                            "marginRight": "1em",
                                            "marginLeft": "1em"
                                        }
                                    }
                                ]
                            },
                            "Main": {
                                "$_maps": {
                                    "viewer": "@/params/viewer"
                                }
                            }
                        },
                        "ff_layout": {
                            "$_fields": [
                                "0"
                            ]
                        },
                        "items": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "default": "default",
                                    "ff_presets": "string:inlineTitle:inlineArrayControls"
                                },
                                {
                                    "type": [
                                        "number",
                                        "null"
                                    ],
                                    "default": null,
                                    "ff_presets": "numberNull:inlineTitle:inlineArrayControls"
                                },
                                {
                                    "type": "boolean",
                                    "default": false,
                                    "ff_presets": "boolean:inlineTitle:inlineArrayControls"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "elements": {
            "links": [
                {
                    "import": [],
                    "from": "styles.json"
                }
            ],
            "code": ""
        },
        "css": {
            "links": [
                "tacit.min.css",
                "style.css"
            ],
            "cxBind": "",
            "code": ""
        },
        "props": {
            "jsonValidation": true,
            "rest": {
                "value": "{\"touched\": true}"
            }
        },
        "name": "arrays and oneOf"
    },
    {
        "schema": {
            "links": [],
            "code": {
                "type": "object",
                "ff_layout": {
                    "$_fields": [
                        "string",
                        "mapped",
                        "hide"
                    ]
                },
                "properties": {
                    "string": {
                        "type": "string",
                        "title": "string",
                        "default": "hide",
                        "ff_presets": "string:inlineTitle",
                        "ff_dataMap": [
                            {
                                "from": "./@value",
                                "to": "../mapped/@value"
                            }
                        ],
                        "ff_params": {
                            "liveUpdate": true
                        }
                    },
                    "mapped": {
                        "type": "string",
                        "title": "mapped",
                        "default": "hide",
                        "ff_presets": "string:inlineTitle",
                        "ff_dataMap": [
                            {
                                "from": "./@value",
                                "to": "../hide/@params/hidden",
                                "$": "^/fn/equal",
                                "args": [
                                    "${value}",
                                    "hide"
                                ]
                            }
                        ]
                    },
                    "hide": {
                        "type": "string",
                        "title": "hide",
                        "ff_presets": "string:inlineTitle"
                    }
                }
            }
        },
        "elements": {
            "links": [
                {
                    "import": [],
                    "from": "styles.json"
                }
            ],
            "code": ""
        },
        "css": {
            "links": [
                "tacit.min.css",
                "style.css"
            ],
            "cxBind": "",
            "code": ""
        },
        "props": {
            "jsonValidation": false,
            "rest": {
                "value": ""
            }
        },
        "name": "dataMaps"
    },
    {
        "schema": {
            "links": [],
            "code": {
                "type": "object",
                "ff_layout": {
                    "$_fields": [
                        "json",
                        "sync",
                        "async",
                        "submitError",
                        "submitWarn",
                        {
                            "$_ref": "^/parts/Submit",
                            "style": {
                                "width": "100%"
                            }
                        }
                    ]
                },
                "properties": {
                    "schema": {
                        "type": "string",
                        "pattern": "json",
                        "title": "json",
                        "ff_presets": "string:inlineTitle",
                        "ff_placeholder": "Enter \"json\" to pass validation..."
                    },
                    "sync": {
                        "type": "string",
                        "title": "sync",
                        "ff_presets": "string:inlineTitle",
                        "ff_validators": [
                            {
                                "$": "^/validators/sync",
                                "args": []
                            }
                        ],
                        "ff_placeholder": "Enter \"sync\" to pass validation..."
                    },
                    "async": {
                        "type": "string",
                        "title": "async",
                        "ff_presets": "string:inlineTitle",
                        "ff_validators": [
                            {
                                "$": "^/validators/async",
                                "args": []
                            }
                        ],
                        "ff_placeholder": "Enter \"async\" to pass validation..."
                    },
                    "submitError": {
                        "type": "string",
                        "title": "submit error",
                        "ff_presets": "string:inlineTitle",
                        "ff_placeholder": "Enter \"submit\" to pass validation..."
                    },
                    "submitWarn": {
                        "type": "string",
                        "title": "submit warn",
                        "ff_presets": "string:inlineTitle",
                        "ff_placeholder": "Enter \"warn\" to remove warning..."
                    }
                }
            }
        },
        "elements": {
            "links": [
                {
                    "import": [],
                    "from": "styles.json"
                }
            ],
            "code": "  validators: {\n    sync: function (v) {\n      return v === 'sync' ? '' : 'sync validation not passed'\n    },\n    async: function (v) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => resolve(v === 'async' ? '' : 'async validation not passed'), 1000)\n      })\n    }\n  }"
        },
        "css": {
            "links": [
                "tacit.min.css",
                "style.css"
            ],
            "cxBind": "",
            "code": ""
        },
        "props": {
            "jsonValidation": true,
            "rest": {
                "value": "{\"onSubmit\":{\"$\":\"function (event, value, fform) {   event.preventDefault();   var valid = fform.valid;   return new Promise((resolve, rejects) => {     setTimeout(() => {       var res = {};       var warn = {};       if (value.submitError !== 'submit') res['submitError'] = 'submit validation not passed';       if (value.submitWarn !== 'warn') warn['submitWarn'] = 'submit warning';       fform.api.setMessages(null, {priority: 1});       fform.api.setMessages(warn, {priority: 1});       if (valid && !Object.keys(res).length) alert('Validation passed');       resolve(res);     }, 10)   }) }\"}}"
            }
        },
        "name": "validation"
    },
    {
        "schema": {
            "links": [],
            "code": {
                "type": "object",
                "ff_layout": {
                    "$_fields": [
                        "formatNum",
                        "parsed"
                    ]
                },
                "properties": {
                    "formatNum": {
                        "type": "string",
                        "title": "formated",
                        "ff_presets": "string:inlineTitle",
                        "ff_dataMap": [
                            {
                                "from": "./@value",
                                "to": "../parsed/@value"
                            }
                        ],
                        "ff_placeholder": "XXX-XXXX-XXX",
                        "ff_params": {
                            "liveUpdate": true
                        },
                        "ff_custom": {
                            "Main": {
                                "onChange": "^/fn/eventValue|parseNum|setValue",
                                "$_maps": {
                                    "value": {
                                        "$": "^/fn/formatNum",
                                        "args": [
                                            "@value"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "parsed": {
                        "type": "string",
                        "title": "parsed",
                        "ff_presets": "string:inlineTitle",
                        "ff_dataMap": [
                            {
                                "from": "./@/value",
                                "to": "../formatNum/@/value"
                            }
                        ],
                        "ff_params": {
                            "liveUpdate": true
                        }
                    }
                }
            }
        },
        "elements": {
            "links": [
                {
                    "import": [],
                    "from": "styles.json"
                }
            ],
            "code": "fn: {\n      formatNum: function (val, ...args) {\n        var a = val.substr(3, 4);\n        var b = val.substr(7, 3);\n        return [val.substr(0, 3) + (a ? '-' + a : '') + (b ? '-' + b : ''), ...args]\n      },\n      parseNum: function (val, ...args) {\n        return [val.replace(/\\D+/g, '').substr(0,10), ...args]\n      }\n}"
        },
        "css": {
            "links": [
                "tacit.min.css",
                "style.css"
            ],
            "cxBind": "",
            "code": ""
        },
        "props": {
            "jsonValidation": false,
            "rest": {
                "value": ""
            }
        },
        "name": "format and parse"
    },
    {
        "schema": {
            "links": [],
            "code": {
                "type": "object",
                "ff_layout": {
                    "$_fields": [
                        "reactSelect",
                        "reactSelectMulti"
                    ]
                },
                "properties": {
                    "reactSelect": {
                        "type": "string",
                        "title": "react-select",
                        "ff_presets": "reactSelect:inlineTitle",
                        "ff_placeholder": "select option...",
                        "enum": [
                            "option 1",
                            "option 2",
                            "option 3"
                        ]
                    },
                    "reactSelectMulti": {
                        "type": "array",
                        "title": "react-select multi",
                        "ff_presets": "reactSelect:inlineTitle",
                        "ff_managed": true,
                        "ff_placeholder": "select multi options...",
                        "ff_custom": {
                            "Main": {
                                "isMulti": true
                            }
                        },
                        "enum": [
                            "option 1",
                            "option 2",
                            "option 3"
                        ]
                    }
                }
            }
        },
        "elements": {
            "links": [
                {
                    "import": [],
                    "from": "styles.json"
                }
            ],
            "code": "{\n  widgets: {\n    reactSelect: Select\n  },\n  fn: {\n    reactSelectParse: function (values) {\n      if (!Array.isArray(values)) return [values.value];\n      return [values.map(function (item) {return item.value})]\n    },\n    reactSelectValue: function (values = []) {\n      if (!Array.isArray(values)) return values? [{value: values, label: values}]:[];\n      return [values.map(function (value) {return {value, label: value}})]\n    },\n  },\n  sets: {\n    reactSelect: {\n      $_ref: '^/sets/nBase',\n      Main: {\n        _$useTag: '^/widgets/reactSelect',\n        $_reactRef: {tagRef: true},\n        onChange: {$: '^/fn/reactSelectParse|setValue|updCached'},\n        $_maps: {\n          value: {$: '^/fn/reactSelectValue', args: ['@/value']},\n          options: {$: '^/fn/reactSelectValue', args: ['@/fData/enum']},\n          isDisabled: '@/params/disabled'\n        },\n      },\n    },\n  }\n}"
        },
        "css": {
            "links": [
                "tacit.min.css",
                "style.css"
            ],
            "cxBind": "",
            "code": ""
        },
        "props": {
            "jsonValidation": false,
            "rest": {
                "value": ""
            }
        },
        "name": "custom input"
    },
    {
        "schema": {
            "links": [],
            "code": {
                "type": "object",
                "ff_dataMap": [
                    {
                        "from": "./@/selector/value",
                        "to": "./@/selector/none",
                        "$": "^/fn/api",
                        "args": [
                            "showOnly",
                            "${value}"
                        ]
                    }
                ],
                "ff_data": {
                    "selector": {
                        "value": "step 1",
                        "enum": [
                            "step 1",
                            "step 2",
                            "step 3"
                        ]
                    }
                },
                "ff_layout": {
                    "$_fields": [
                        {
                            "$_ref": "^/parts/RadioSelector",
                            "className": {
                                "shrink": true,
                                "inline": true
                            }
                        },
                        "step 1",
                        "step 2",
                        "step 3",
                        {
                            "className": {
                                "inline": true
                            },
                            "$_fields": [
                                {
                                    "$_ref": "^/parts/Button",
                                    "children": "<< Back",
                                    "onClick": {
                                        "$": "^/fn/nextStep",
                                        "args": [
                                            -1,
                                            false
                                        ]
                                    },
                                    "$_maps": {
                                        "className/hidden": {
                                            "$": "^/fn/equal",
                                            "args": [
                                                "@selector/value",
                                                "step 1"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "$_ref": "^/parts/expander"
                                },
                                {
                                    "$_ref": "^/parts/Button",
                                    "children": "Next >>",
                                    "onClick": {
                                        "$": "^/fn/nextStep",
                                        "args": [
                                            1,
                                            true
                                        ]
                                    },
                                    "$_maps": {
                                        "className/hidden": {
                                            "$": "^/fn/equal",
                                            "args": [
                                                "@selector/value",
                                                "step 3"
                                            ]
                                        }
                                    }
                                },
                                {
                                    "$_ref": "^/parts/Submit",
                                    "$_maps": {
                                        "className/hidden": {
                                            "$": "^/fn/equal|not",
                                            "args": [
                                                "@selector/value",
                                                "step 3"
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                },
                "properties": {
                    "step 1": {
                        "type": "object",
                        "ff_dataMap": [
                            {
                                "from": "./@/status/valid,untouched",
                                "to": "../@/selector",
                                "$": "^/fn/mapValid",
                                "args": [
                                    "@status/valid",
                                    "@status/untouched"
                                ]
                            }
                        ],
                        "ff_layout": {
                            "$_fields": [
                                "json",
                                "sync"
                            ]
                        },
                        "properties": {
                            "schema": {
                                "type": "string",
                                "pattern": "json",
                                "title": "json",
                                "default": "json",
                                "ff_presets": "string:inlineTitle",
                                "ff_placeholder": "Enter \"json\" to pass validation..."
                            },
                            "sync": {
                                "type": "string",
                                "title": "sync",
                                "default": "sync",
                                "ff_presets": "string:inlineTitle",
                                "ff_validators": [
                                    {
                                        "$": "^/validators/sync",
                                        "args": []
                                    }
                                ],
                                "ff_placeholder": "Enter \"sync\" to pass validation..."
                            }
                        }
                    },
                    "step 2": {
                        "type": "object",
                        "ff_dataMap": [
                            {
                                "from": "./@/status/valid,untouched",
                                "to": "../@/selector",
                                "$": "^/fn/mapValid",
                                "args": [
                                    "@status/valid",
                                    "@status/untouched"
                                ]
                            }
                        ],
                        "ff_layout": {
                            "$_fields": [
                                "async",
                                "submitError"
                            ]
                        },
                        "properties": {
                            "async": {
                                "type": "string",
                                "title": "async",
                                "default": "async",
                                "ff_presets": "string:inlineTitle",
                                "ff_validators": [
                                    {
                                        "$": "^/validators/async",
                                        "args": []
                                    }
                                ],
                                "ff_placeholder": "Enter \"async\" to pass validation..."
                            },
                            "submitError": {
                                "type": "string",
                                "title": "submit error",
                                "ff_presets": "string:inlineTitle",
                                "ff_placeholder": "Enter \"submit\" to pass validation..."
                            }
                        }
                    },
                    "step 3": {
                        "type": "object",
                        "ff_dataMap": [
                            {
                                "from": "./@/status/valid,untouched",
                                "to": "../@/selector",
                                "$": "^/fn/mapValid",
                                "args": [
                                    "@status/valid",
                                    "@status/untouched"
                                ]
                            }
                        ],
                        "ff_layout": {
                            "$_fields": [
                                "submitError2",
                                "submitWarn"
                            ]
                        },
                        "properties": {
                            "submitError2": {
                                "type": "string",
                                "title": "submit error 2",
                                "ff_presets": "string:inlineTitle",
                                "ff_placeholder": "Enter \"submit\" to pass validation..."
                            },
                            "submitWarn": {
                                "type": "string",
                                "title": "submit warn",
                                "ff_presets": "string:inlineTitle",
                                "ff_placeholder": "Enter \"warn\" to remove warning..."
                            }
                        }
                    }
                }
            }
        },
        "elements": {
            "links": [
                {
                    "import": [],
                    "from": "styles.json"
                }
            ],
            "code": "fn:{\n    mapValid: function (valid, untouched) {\n      var idx = this.from.split('@')[0].split('/').splice(-2)[0];\n      this.api.set('./@/selector/enumExten/' + idx + '/className/error', !untouched && valid === false)\n    },\n    nextStep: function (step = 1, onlyIfValid = false) {\n      var enumSteps = this.api.get('./@selector/enum');\n      var stepValue = this.api.get('./@selector/value');\n      var idx = enumSteps.indexOf(stepValue) + step;\n      if (idx < 0) idx = 9;\n      if (idx >= enumSteps.length) idx = enumSteps.length - 1;\n      if (onlyIfValid) {\n        if (!this.api.get('./' + stepValue + '@status/valid')) {\n          this.api.reset({path: './' + stepValue, status: 'untouched', value: 0});\n          return\n        }\n      }\n      this.api.set('./@selector/value', enumSteps[idx]);\n    },\n    submit: function (event, value, fform) {\n      event.preventDefault();\n      var valid = fform.valid;\n      return new Promise((resolve, rejects) => {\n        setTimeout(() => {\n          var res = {};\n          var warn = {};\n          if (value[\"step 2\"].submitError !== 'submit') res[\"step 2\"] = {'submitError': 'submit validation not passed'};\n          if (value[\"step 3\"].submitError2 !== 'submit') res[\"step 3\"] = {'submitError2': 'submit validation not passed'};\n          if (value[\"step 3\"].submitWarn !== 'warn') warn[\"step 3\"] = {'submitWarn': 'submit warning'};\n          fform.api.setMessages(null, {priority: 1});\n          fform.api.setMessages(warn, {priority: 1});\n          if (valid && !Object.keys(res).length) alert('Validation passed');\n          resolve(res);\n        }, 10)\n      })\n    },\n},\n  validators: {\n    sync: function (v) {\n      return v === 'sync' ? '' : 'sync validation not passed'\n    },\n    async: function (v) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => resolve(v === 'async' ? '' : 'async validation not passed'), 1000)\n      })\n    }\n  }"
        },
        "css": {
            "links": [
                "tacit.min.css",
                "style.css",
                "radio.css"
            ],
            "cxBind": "",
            "code": ""
        },
        "props": {
            "jsonValidation": true,
            "rest": {
                "value": "{\"onSubmit\":\"^/fn/submit\"}"
            }
        },
        "name": "tabs and steps"
    }
]